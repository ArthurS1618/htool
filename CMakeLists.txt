#=============================================================================#
#============================== Project ======================================#
#=============================================================================#
cmake_minimum_required(VERSION 3.0)
Project(Htool 
	VERSION 1.0.1
	DESCRIPTION "A header only c++ library that provides Hierarchical matrices."
	HOMEPAGE_URL "https://github.com/PierreMarchand20/htool"
	LANGUAGES CXX)

if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)

	# To set default CMAKE_BUILD_TYPE
	set(default_build_type "Release")
	if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
		message(STATUS "Setting build type to '${default_build_type}' as none was specified.")
		set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE STRING "Choose the type of build." FORCE)
	endif()

	if (${CMAKE_BUILD_TYPE} STREQUAL Release_native)
		message(STATUS "Setting build type to 'Release_native'.")
		set(CMAKE_BUILD_TYPE Release)
		SET(CMAKE_CXX_FLAGS  "${CMAKE_C_FLAGS} -march=native")
	endif()

	# Files to do find_package for some module
	list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake_modules")

	# Information about compilation exported
	set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

	# Let's nicely support folders in IDE's
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
	
	# Testing only available if this is the main app
    # Note this needs to be done in the main CMakeLists
    # since it calls enable_testing, which must be in the
    # main CMakeLists.
	include(CTest)

    # # Docs only available if this is the main app
    # find_package(Doxygen)
    # if(Doxygen_FOUND)
	# add_subdirectory(docs)
    # else()
	# message(STATUS "Doxygen not found, not building docs")
    # endif()


endif()

# Options
option(HTOOL_WITH_EXAMPLES             "Build htool examples ?" ON)
option(HTOOL_WITH_GUI                  "Build htool visualization tools ?" OFF)
option(HTOOL_WITH_PYTHON_INTERFACE     "Build htool visualization tools ?" OFF)



#=============================================================================#
#========================== External Libraries ===============================#
#=============================================================================#
# MPI
find_package (MPI REQUIRED)
message("-- MPI libraries found in " "${MPI_LIBRARIES}")
message("-- MPI include files found in " "${MPI_INCLUDE_PATH}")

# OPENMP
find_package(OpenMP)
if (OPENMP_FOUND)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
    message("-- OpenMP flags are " "${OpenMP_CXX_FLAGS}" )
    message("-- OpenMP linker flags are " "${OpenMP_EXE_LINKER_FLAGS}" )
else()
    message("-- OpenMP not found")
endif()

# BLAS
find_package(BLAS REQUIRED)
message("-- Found Blas implementation:" "${BLAS_LIBRARIES}")

# LAPACK
find_package(LAPACK)
message("-- Found Lapack:" "${LAPACK_LIBRARIES}")

# ARPACK
find_package(ARPACK)
message("-- Found Arpack:" "${ARPACK_LIBRARIES}")

# HPDDM
find_package(HPDDM)


if (HTOOL_WITH_GUI)
	# GLM
	find_package(GLM)
endif()

if (HTOOL_WITH_PYTHON_INTERFACE)
	find_package (Python COMPONENTS Interpreter Development)
endif()

#=============================================================================#
#========================== Libraries ========================================#
#=============================================================================#
#=== GUI
if (HTOOL_WITH_GUI)
	#=== Nanogui and dependencies
	message("-- Nanogui and its dependencies will be built as submodules")
	execute_process(COMMAND git submodule update --init --recursive external/nanogui
	                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})


	# Configuration options for nanogui
	set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
	set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
	set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)

	# Add the configurations from nanogui
	add_subdirectory(external/nanogui)

	# For reliability of parallel build, make the NanoGUI targets dependencies
	set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")

	# Various preprocessor definitions have been generated by NanoGUI
	add_definitions(${NANOGUI_EXTRA_DEFS})

	# On top of adding the path to nanogui/include, you may need extras
	include_directories(${NANOGUI_EXTRA_INCS})

	set(NANOGUI_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/external/nanogui/include" )



	# Create an interface library
	add_library(htool_visu INTERFACE)
	target_include_directories(htool_visu INTERFACE ${NANOGUI_EXTRA_INCS} ${NANOGUI_INCLUDE_DIR} ${GLM_INCLUDE_DIRS})
	target_link_libraries(htool_visu INTERFACE
						nanogui
						${NANOGUI_EXTRA_LIBS})

endif()


#=== HTOOL as header only library
add_library(htool INTERFACE)
target_include_directories(htool INTERFACE
					$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
					$<INSTALL_INTERFACE:include>
					${MPI_INCLUDE_PATH}
					${HPDDM_INCLUDE_DIRS}
					${MKL_INC_DIR})
target_link_libraries(htool INTERFACE
					${MPI_LIBRARIES}
					${BLAS_LIBRARIES}
					${LAPACK_LIBRARIES}
					${ARPACK_LIBRARIES})

target_compile_features(htool INTERFACE cxx_std_11)

#=== HTOOL python interface as shared library
if (HTOOL_WITH_PYTHON_INTERFACE)
	add_library(htool_shared SHARED interface/htool_python.cpp)
	target_include_directories(htool_shared PRIVATE
						$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
						$<INSTALL_INTERFACE:include>
						${MPI_INCLUDE_PATH}
						${HPDDM_INCLUDE_DIRS}
						${MKL_INC_DIR}
						${Python_INCLUDE_DIRS})
	target_link_libraries(htool_shared
						${MPI_LIBRARIES}
						${BLAS_LIBRARIES}
						${LAPACK_LIBRARIES}
						${Python_LIBRARIES})

	target_compile_features(htool_shared PRIVATE cxx_std_11)
endif()

# For headers to show in IDE
if (NOT "${CMAKE_VERSION}" VERSION_LESS 3.1)
	target_sources(htool INTERFACE ${htool_include_dir})
endif()

#===
#=============================================================================#
#========================== Installation =====================================#
#=============================================================================#
include(CMakePackageConfigHelpers)
write_basic_package_version_file(
	"${PROJECT_BINARY_DIR}/htoolConfigVersion.cmake"
	VERSION 1.0
	COMPATIBILITY AnyNewerVersion
)

install(TARGETS htool
		EXPORT htool_Targets
		LIBRARY DESTINATION lib COMPONENT Runtime
		ARCHIVE DESTINATION lib COMPONENT Development
		RUNTIME DESTINATION bin COMPONENT Runtime
		PUBLIC_HEADER DESTINATION include COMPONENT Development
		BUNDLE DESTINATION bin COMPONENT Runtime)
		
include(CMakePackageConfigHelpers)
configure_package_config_file(
	"${PROJECT_SOURCE_DIR}/cmake/htoolConfig.cmake.in"
	"${PROJECT_BINARY_DIR}/htoolConfig.cmake"
	INSTALL_DESTINATION lib/cmake/mylib
)

install(EXPORT htool_Targets DESTINATION lib/cmake/mylib)
install(FILES "${PROJECT_BINARY_DIR}/htoolConfigVersion.cmake"
			"${PROJECT_BINARY_DIR}/htoolConfig.cmake"
		DESTINATION lib/cmake/mylib)
install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/ DESTINATION include)

#=============================================================================#
#========================== Repertories ======================================#
#=============================================================================#
# Add examples
if (HTOOL_WITH_EXAMPLES)
	add_custom_target(build-examples)
	add_subdirectory(examples EXCLUDE_FROM_ALL)
endif()

# Add tests
if((CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME OR MODERN_CMAKE_BUILD_TESTING) AND BUILD_TESTING)
	add_custom_target(build-tests)
	add_subdirectory(tests EXCLUDE_FROM_ALL)
endif()


add_subdirectory(src EXCLUDE_FROM_ALL)

#
#
# # Testing project
# enable_testing()
# add_test(NAME lrmatrix_test COMMAND Test_lrmatrix)
# add_test(NAME hmatrix_test COMMAND Test_hmatrix)
# add_test(NAME cluster_test COMMAND Test_cluster)
# # Add documentation
# add_subdirectory(doc)
