#=============================================================================#
#============================== Project ======================================#
#=============================================================================#
cmake_minimum_required(VERSION 2.6)
Project(ElastoPhi)

if ("${CMAKE_VERSION}" VERSION_LESS 3.1)
	add_compile_options(-std=c++11)
else ()
	set(CMAKE_CXX_STANDARD 11)
	set(CMAKE_CXX_STANDARD_REQUIRED ON)
endif ()

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to 'Release' as none was specified.")
  set(CMAKE_BUILD_TYPE Release)
endif()


# Files to do find_package for some module
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake_modules")

# Useful variables
set(htool_include_dir "${CMAKE_CURRENT_SOURCE_DIR}/include")




#=============================================================================#
#========================== External Libraries ===============================#
#=============================================================================#
# Eigen package
find_package (Eigen3 REQUIRED)

# MPI
find_package (MPI REQUIRED)

# BLAS
find_package(BLAS REQUIRED)

#=============================================================================#
#=========================== Libraries =======================================#
#=============================================================================#
#=== HTOOL
if(MPI_FOUND AND BLAS_FOUND AND EIGEN3_FOUND)
	message("-- Htool and dependencies found")
	add_library(htool INTERFACE)
	target_include_directories(htool INTERFACE 
						${htool_include_dir}
						${EIGEN3_INCLUDE_DIR}
						${MPI_INCLUDE_PATH})
	target_link_libraries(htool INTERFACE 
						${MPI_LIBRARIES}
						${EIGEN3_LIBRARIES}
						${BLAS_LIBRARIES})
else()
	message("Htool and dependencies not found")
endif()
configure_file(${htool_include_dir}/config.h.in ${CMAKE_BINARY_DIR}/generated/config.h )
include_directories( ${CMAKE_BINARY_DIR}/generated/ )
#===

#=== Nanogui and dependencies
message("-- Nanogui and its dependencies will be built as submodules")
execute_process(COMMAND git submodule update --init --recursive
                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
                    
    
# Configuration options for nanogui
set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)

# Add the configurations from nanogui
add_subdirectory(external/nanogui)

# For reliability of parallel build, make the NanoGUI targets dependencies
set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")

# Various preprocessor definitions have been generated by NanoGUI
add_definitions(${NANOGUI_EXTRA_DEFS})

# Create an interface library
add_library(htool_visu INTERFACE)
target_include_directories(htool_visu INTERFACE ${NANOGUI_EXTRA_INCS} "external/nanogui/include")
target_link_libraries(htool_visu INTERFACE 
					nanogui
					${NANOGUI_EXTRA_LIBS})
#===




#=== GLM
find_package(GLM)
if(GLM_FOUND)
	message("-- GLM found")
else()
	message("-- GLM downloaded in external")
	execute_process(COMMAND git submodule update --init --recursive
                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
    set(${GLM_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}/external/glm)
endif()
target_include_directories(htool_visu INTERFACE ${GLM_INCLUDE_DIRS})
#===

#=============================================================================#
#========================== Repertories ======================================#
#=============================================================================#
# Add sources file
add_subdirectory(src)

# # Add test files
# add_subdirectory(test)
#
#
# # Testing project
# enable_testing()
# add_test(NAME lrmatrix_test COMMAND Test_lrmatrix)
# add_test(NAME hmatrix_test COMMAND Test_hmatrix)
# add_test(NAME cluster_test COMMAND Test_cluster)
# # Add documentation
# add_subdirectory(doc)
