#=============================================================================#
#============================== Project ======================================#
#=============================================================================#
cmake_minimum_required(VERSION 3.0)
Project(Htool)

# To force c++11
if (${CMAKE_VERSION} VERSION_LESS 3.1)
	add_compile_options(-std=c++11)
elseif (${CMAKE_VERSION} VERSION_LESS 3.6.3 AND ${CMAKE_CXX_COMPILER_ID} STREQUAL "Intel")
	add_compile_options(-std=c++11)
else()
	set(CMAKE_CXX_STANDARD 11)
	set(CMAKE_CXX_STANDARD_REQUIRED ON)
endif ()

# To set CMAKE_BUILD_TYPE
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to 'Release' as none was specified.")
  set(CMAKE_BUILD_TYPE Release)
endif()


# Files to do find_package for some module
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake_modules")

# Useful variables
set(htool_include_dir "${CMAKE_CURRENT_SOURCE_DIR}/include")

# Options
option(HTOOL_WITH_EXAMPLES "Build htool examples ?" ON)
option(HTOOL_WITH_TESTS    "Build htool tests ?" ON)
option(HTOOL_WITH_GUI      "Build htool visualization tools ?" OFF)

add_definitions(-DHTOOL_WITH_GUI=${HTOOL_WITH_GUI})

#=============================================================================#
#========================== External Libraries ===============================#
#=============================================================================#
# MPI
find_package (MPI REQUIRED)
message("-- MPI implementation found in " "${MPI_LIBRARIES}")
# BLAS
find_package(BLAS REQUIRED)
message("-- Blas implementation found in " "${BLAS_LIBRARIES}")
# EIGEN3
find_package(EIGEN3)
# LAPACK
find_package(LAPACK REQUIRED)
message("-- Lapack implementation found in " "${LAPACK_LIBRARIES}")


#=============================================================================#
#========================== Libraries ========================================#
#=============================================================================#
if (HTOOL_WITH_GUI)
	#=== Nanogui and dependencies
	message("-- Nanogui and its dependencies will be built as submodules")
	execute_process(COMMAND git submodule update --init --recursive
	                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})


	# Configuration options for nanogui
	set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
	set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
	set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)

	# Add the configurations from nanogui
	add_subdirectory(external/nanogui)

	# For reliability of parallel build, make the NanoGUI targets dependencies
	set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")

	# Various preprocessor definitions have been generated by NanoGUI
	add_definitions(${NANOGUI_EXTRA_DEFS})

	# Create an interface library
	add_library(htool_visu INTERFACE)
	target_include_directories(htool_visu INTERFACE ${NANOGUI_EXTRA_INCS} "${CMAKE_CURRENT_SOURCE_DIR}/external/nanogui/include")
	target_link_libraries(htool_visu INTERFACE
						nanogui
						${NANOGUI_EXTRA_LIBS})
	#===
	#=== GLM
	find_package(GLM)
	if(GLM_FOUND)
		message("-- GLM found")
	else()
		message("-- GLM downloaded in external")
		execute_process(COMMAND git submodule update --init --recursive
	                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
	    set(${GLM_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}/external/glm)
	endif()
	target_include_directories(htool_visu INTERFACE ${GLM_INCLUDE_DIRS})
	#===
endif()

#=== HTOOL
if(MPI_FOUND AND BLAS_FOUND AND LAPACK_FOUND)
	message("-- Htool and dependencies found")
	#=== HPDDM
	find_path(hpddm_include_dir "HPDDM.hpp" "${CMAKE_CURRENT_SOURCE_DIR}/external/hpddm/include")
	if(hpddm_include_dir)
		message("-- HPDDM and dependencies found")
	elseif(NOT hpddm_include_dir)
		execute_process(COMMAND git submodule update --init --recursive
	                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
	    set(hpddm_include_dir "${CMAKE_CURRENT_SOURCE_DIR}/external/hpddm/include")
	endif()
	add_library(hpddm INTERFACE)
	target_include_directories(hpddm INTERFACE "${hpddm_include_dir}")
	target_link_libraries(hpddm INTERFACE
				${MPI_LIBRARIES}
				${BLAS_LIBRARIES}
				${LAPACK_LIBRARIES})
	#===

	add_library(htool INTERFACE)
	target_include_directories(htool INTERFACE
						${htool_include_dir}
						${MPI_INCLUDE_PATH})
	target_link_libraries(htool INTERFACE
						${MPI_LIBRARIES}
						${BLAS_LIBRARIES}
						hpddm)

	# For headers to show in IDE
	if (NOT "${CMAKE_VERSION}" VERSION_LESS 3.1)
		target_sources(htool INTERFACE ${htool_include_dir})
	endif()

else()
	message("Htool and dependencies not found")
endif()
#===


#=============================================================================#
#========================== Repertories ======================================#
#=============================================================================#
# Add sources file
if (HTOOL_WITH_EXAMPLES)
	add_subdirectory(src)
endif()

# Add test files
if (HTOOL_WITH_TESTS)
	enable_testing()
	add_custom_target(build-tests)
	add_subdirectory(test EXCLUDE_FROM_ALL)
endif()

#
#
# # Testing project
# enable_testing()
# add_test(NAME lrmatrix_test COMMAND Test_lrmatrix)
# add_test(NAME hmatrix_test COMMAND Test_hmatrix)
# add_test(NAME cluster_test COMMAND Test_cluster)
# # Add documentation
# add_subdirectory(doc)
