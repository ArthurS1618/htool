#=============================================================================#
#============================== Project ======================================#
#=============================================================================#
cmake_minimum_required(VERSION 3.0)
Project(Htool)

# To force c++11
if (${CMAKE_VERSION} VERSION_LESS 3.1)
	add_compile_options(-std=c++11)
elseif (${CMAKE_VERSION} VERSION_LESS 3.6.3 AND ${CMAKE_CXX_COMPILER_ID} STREQUAL "Intel")
	add_compile_options(-std=c++11)
else()
	set(CMAKE_CXX_STANDARD 11)
	set(CMAKE_CXX_STANDARD_REQUIRED ON)
endif ()

# To set CMAKE_BUILD_TYPE
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to 'Release' as none was specified.")
  set(CMAKE_BUILD_TYPE Release)
endif()


# Files to do find_package for some module
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake_modules")

# Useful variables
set(htool_include_dir "${CMAKE_CURRENT_SOURCE_DIR}/include")

# Options
option(HTOOL_WITH_EXAMPLES "Build htool examples ?" ON)
option(HTOOL_WITH_TESTS    "Build htool tests ?" ON)
option(HTOOL_WITH_GUI      "Build htool visualization tools ?" OFF)

#=============================================================================#
#========================== External Libraries ===============================#
#=============================================================================#
# MPI
find_package (MPI REQUIRED QUIET)
message("-- MPI libraries found in " "${MPI_LIBRARIES}")
message("-- MPI include files found in " "${MPI_INCLUDE_PATH}")

# BLAS
find_package(BLAS REQUIRED QUIET)
message("-- Found Blas implementation:" "${BLAS_LIBRARIES}")

# EIGEN3
find_package(EIGEN3 QUIET)
if (EIGEN3_FOUND)
	message("-- Found Eigen3:" "${EIGEN3_INCLUDE_DIR}")
else()
	message("-- Eigen3 not found, no SVD available")
endif()

# LAPACK
find_package(LAPACK REQUIRED QUIET)
message("-- Found Lapack:" "${LAPACK_LIBRARIES}")

# HPDDM
find_package(HPDDM REQUIRED)


if (HTOOL_WITH_GUI)
	# Nanogui
	find_package(NANOGUI QUIET)
	if (NANOGUI_FOUND)
		message("-- Nanogui library found in" "${NANOGUI_LIBRARY}")
		message("-- Nanogui include files found in" "${NANOGUI_INCLUDE_DIR}")
	else()
		message("-- Nanogui not found")
	endif()
	# GLM
	find_package(GLM)
endif()
#=============================================================================#
#========================== Libraries ========================================#
#=============================================================================#
if (HTOOL_WITH_GUI)
	#=== Nanogui and dependencies
	message("-- Nanogui and its dependencies will be built as submodules")
	execute_process(COMMAND git submodule update --init --recursive external/nanogui
	                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})


	# Configuration options for nanogui
	set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
	set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
	set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)

	# Add the configurations from nanogui
	add_subdirectory(external/nanogui)

	# For reliability of parallel build, make the NanoGUI targets dependencies
	set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")

	# Various preprocessor definitions have been generated by NanoGUI
	add_definitions(${NANOGUI_EXTRA_DEFS})

	# On top of adding the path to nanogui/include, you may need extras
	include_directories(${NANOGUI_EXTRA_INCS})

	set(NANOGUI_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/external/nanogui/include" )



	# Create an interface library
	add_library(htool_visu INTERFACE)
	target_include_directories(htool_visu INTERFACE ${NANOGUI_EXTRA_INCS} ${NANOGUI_INCLUDE_DIR} ${GLM_INCLUDE_DIRS})
	target_link_libraries(htool_visu INTERFACE
						nanogui
						${NANOGUI_EXTRA_LIBS})

endif()


#=== HTOOL
add_library(htool INTERFACE)
target_include_directories(htool INTERFACE
					${htool_include_dir}
					${MPI_INCLUDE_PATH}
					${HPDDM_INCLUDE_DIR})
target_link_libraries(htool INTERFACE
					${MPI_LIBRARIES}
					${BLAS_LIBRARIES}
					${LAPACK_LIBRARIES})

# For headers to show in IDE
if (NOT "${CMAKE_VERSION}" VERSION_LESS 3.1)
	target_sources(htool INTERFACE ${htool_include_dir})
endif()

#===


#=============================================================================#
#========================== Repertories ======================================#
#=============================================================================#
# Add sources file
if (HTOOL_WITH_EXAMPLES)
	add_subdirectory(src)
endif()

# Add test files
if (HTOOL_WITH_TESTS)
	enable_testing()
	add_custom_target(build-tests)
	add_subdirectory(tests EXCLUDE_FROM_ALL)
endif()

#
#
# # Testing project
# enable_testing()
# add_test(NAME lrmatrix_test COMMAND Test_lrmatrix)
# add_test(NAME hmatrix_test COMMAND Test_hmatrix)
# add_test(NAME cluster_test COMMAND Test_cluster)
# # Add documentation
# add_subdirectory(doc)
